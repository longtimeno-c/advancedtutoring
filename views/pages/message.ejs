<%- include('../partials/header') %>

<section class="messages-section">
  <div class="container">
    <div class="chat-container">
      <!-- Loading state -->
      <div id="chat-loading" class="loading-container">
        <div class="loading-spinner"></div>
        <p>Loading conversation...</p>
      </div>
      
      <!-- Error state -->
      <div id="chat-error" class="error-container" style="display: none;">
        <i class="fas fa-exclamation-circle error-icon"></i>
        <p>Error loading conversation. Please try again later.</p>
      </div>
      
      <!-- Chat UI -->
      <div id="chat-ui" style="display: none;">
        <div class="chat-header">
          <div class="header-left">
            <a href="/messages" class="back-button"><i class="fas fa-arrow-left"></i></a>
            <h2 id="chat-recipient-name">Loading...</h2>
          </div>
          <div class="chat-status-container">
            <div class="chat-status" id="chat-status">Online</div>
            <div class="unread-indicator" id="unread-indicator"></div>
          </div>
        </div>
        
        <div class="messages-container" id="messages-container">
          <!-- Messages will be loaded here -->
        </div>
        
        <div class="message-form-container">
          <form id="message-form" class="message-form">
            <textarea id="message-input" placeholder="Type your message here..." required></textarea>
            <button type="submit" class="send-button">
              <i class="fas fa-paper-plane"></i>
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    // Check authentication
    const token = localStorage.getItem('token');
    const user = JSON.parse(localStorage.getItem('user') || 'null');
    
    if (!token || !user) {
      window.location.href = '/login';
      return;
    }
    
    // Get the conversation ID from the URL
    const urlParts = window.location.pathname.split('/');
    const conversationId = urlParts[urlParts.length - 1];
    
    // References to DOM elements
    const chatLoading = document.getElementById('chat-loading');
    const chatError = document.getElementById('chat-error');
    const chatUI = document.getElementById('chat-ui');
    const recipientNameElement = document.getElementById('chat-recipient-name');
    const messagesContainer = document.getElementById('messages-container');
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    
    // Load conversation
    await loadConversation(conversationId);
    
    // Handle form submission
    messageForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      await sendMessage();
    });

    // Handle enter key press
    messageInput.addEventListener('keydown', async (e) => {
      // Send message on Enter (without shift)
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        await sendMessage();
      }
    });

    // Function to send message
    async function sendMessage() {
      const content = messageInput.value.trim();
      
      if (!content) return;
      
      try {
        // Show sending indicator
        const tempId = Date.now().toString();
        const tempMessage = {
          id: tempId,
          senderId: user.id,
          content,
          createdAt: new Date().toISOString(),
          status: 'sending'
        };
        
        // Add temporary message to UI
        addMessageToUI(tempMessage, user.id);
        
        // Clear input and reset height
        messageInput.value = '';
        messageInput.style.height = 'auto';
        
        // Scroll to bottom
        scrollToBottom();
        
        const response = await fetch('/api/messages', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            receiverId: conversationId,
            content
          })
        });
        
        if (!response.ok) {
          const data = await response.json();
          throw new Error(data.message || 'Failed to send message');
        }
        
        // Update message status to sent
        const tempMessageElement = document.getElementById(`message-${tempId}`);
        if (tempMessageElement) {
          tempMessageElement.classList.remove('sending');
        }
        
        // Reload conversation to show the new message
        await loadConversation(conversationId, false);
        
      } catch (error) {
        console.error('Send message error:', error);
        alert('Failed to send message: ' + error.message);
      }
    }

    // Function to add a message to the UI
    function addMessageToUI(message, currentUserId) {
      const isSentByMe = message.senderId === currentUserId;
      const messageDate = new Date(message.createdAt);
      
      // Create message element
      const messageElement = document.createElement('div');
      messageElement.id = `message-${message.id}`;
      messageElement.className = `message ${isSentByMe ? 'sent' : 'received'} ${message.status === 'sending' ? 'sending' : ''}`;
      
      messageElement.innerHTML = `
        <div class="message-content">${message.content}</div>
        <div class="message-time">
          ${formatTime(messageDate)}
          ${message.status === 'sending' ? '<span class="sending-indicator">Sending...</span>' : ''}
        </div>
      `;
      
      // Add to container
      messagesContainer.appendChild(messageElement);
    }

    // Auto-resize textarea
    messageInput.addEventListener('input', function() {
      this.style.height = 'auto';
      this.style.height = (this.scrollHeight) + 'px';
    });
    
    // Function to scroll to bottom of messages
    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Load the conversation
    async function loadConversation(userId, showLoading = true) {
      try {
        if (showLoading) {
          chatLoading.style.display = 'flex';
          chatUI.style.display = 'none';
        }
        chatError.style.display = 'none';
        
        // Fetch user details
        const userResponse = await fetch(`/api/users/${userId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!userResponse.ok) {
          throw new Error('Failed to load user details');
        }
        
        const userData = await userResponse.json();
        const recipient = userData.user;
        
        // Set recipient name
        recipientNameElement.textContent = `${recipient.firstName} ${recipient.lastName}`.trim() || recipient.email;
        
        // Fetch unread messages count
        try {
          const unreadResponse = await fetch('/api/messages/unread', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (unreadResponse.ok) {
            const unreadData = await unreadResponse.json();
            const unreadFromUser = unreadData.conversations?.find(c => c.userId === userId)?.count || 0;
            
            const unreadIndicator = document.getElementById('unread-indicator');
            if (unreadFromUser > 0) {
              unreadIndicator.textContent = unreadFromUser;
              unreadIndicator.style.display = 'flex';
            } else {
              unreadIndicator.style.display = 'none';
            }
          }
        } catch (error) {
          console.error('Error fetching unread count:', error);
        }
        
        // Fetch conversation
        const conversationResponse = await fetch(`/api/messages/conversation/${userId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!conversationResponse.ok) {
          throw new Error('Failed to load conversation');
        }
        
        const conversationData = await conversationResponse.json();
        const messages = conversationData.messages || [];
        
        // Display messages
        renderMessages(messages, user.id, recipient);
        
        // Hide loading, show chat UI
        chatLoading.style.display = 'none';
        chatUI.style.display = 'flex';
        
        // Scroll to bottom of messages
        scrollToBottom();
        
      } catch (error) {
        console.error('Load conversation error:', error);
        chatLoading.style.display = 'none';
        chatError.style.display = 'flex';
      }
    }
    
    // Render messages in the container
    function renderMessages(messages, currentUserId, recipient) {
      if (messages.length === 0) {
        messagesContainer.innerHTML = '<div class="no-messages">No messages yet. Start a conversation!</div>';
        return;
      }
      
      // Sort messages by date
      messages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
      
      let html = '';
      let lastDate = null;
      
      messages.forEach(message => {
        const messageDate = new Date(message.createdAt);
        const isSameDay = lastDate && 
                        lastDate.getDate() === messageDate.getDate() &&
                        lastDate.getMonth() === messageDate.getMonth() &&
                        lastDate.getFullYear() === messageDate.getFullYear();
        
        // Show date separator if it's a new day
        if (!isSameDay) {
          html += `
            <div class="date-separator">
              <span>${formatDate(messageDate)}</span>
            </div>
          `;
          lastDate = messageDate;
        }
        
        // Determine if the message is sent by the current user
        const isSentByMe = message.senderId === currentUserId;
        
        // Add the message
        html += `
          <div id="message-${message.id}" class="message ${isSentByMe ? 'sent' : 'received'}">
            <div class="message-content">${message.content}</div>
            <div class="message-time">${formatTime(messageDate)}</div>
          </div>
        `;
      });
      
      messagesContainer.innerHTML = html;
    }
    
    // Format date for display
    function formatDate(date) {
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      
      if (date.toDateString() === now.toDateString()) {
        return 'Today';
      } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
      } else {
        return date.toLocaleDateString(undefined, {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
      }
    }
    
    // Format time for display
    function formatTime(date) {
      return date.toLocaleTimeString(undefined, {
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    // Poll for new messages every 10 seconds
    const pollInterval = setInterval(() => {
      loadConversation(conversationId, false);
    }, 10000);
    
    // Clean up on page leave
    window.addEventListener('beforeunload', () => {
      clearInterval(pollInterval);
    });
  });
</script>

<style>
  :root {
    --message-radius: 1.25rem;
    --message-tail-radius: 0.25rem;
    --header-height: 64px;
    --mobile-header-height: 56px;
  }

  .messages-section {
    padding: 0;
    height: calc(100vh - var(--header-height)); /* Use CSS variable for header height */
    display: flex;
    flex-direction: column;
    background-color: var(--light-bg);
    overflow: hidden; /* Prevent scrolling on the section itself */
  }
  
  .container {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 0; /* Important for nested flex scrolling */
    max-width: 1600px; /* Further increased for better use of wide screens */
    width: 100%;
    margin: 0 auto;
    padding: 0;
    overflow: hidden; /* Prevent scrolling issues */
  }
  
  .chat-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    background-color: var(--bg-color);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    overflow: hidden;
    height: 100%; /* Ensure it takes up full height */
  }
  
  #chat-ui {
    flex: 1;
    display: flex;
    flex-direction: column;
    height: 100%; /* Ensure it takes up full height */
    overflow: hidden; /* Prevent scrolling issues */
  }
  
  .chat-header {
    padding: 0.875rem 1rem;
    background-color: var(--primary-color);
    color: var(--light-text);
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    z-index: 10;
  }
  
  .header-left {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    max-width: 70%;
  }
  
  .back-button {
    color: var(--light-text);
    font-size: 1.1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    transition: background-color 0.2s;
  }
  
  .back-button:hover {
    background-color: rgba(255,255,255,0.15);
  }
  
  .chat-header h2 {
    margin: 0;
    font-size: 1.25rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .chat-status-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .chat-status {
    font-size: 0.875rem;
    display: flex;
    align-items: center;
  }
  
  .chat-status::before {
    content: '';
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #2ecc71;
    margin-right: 5px;
  }
  
  .unread-indicator {
    background-color: #e74c3c;
    color: white;
    border-radius: 50%;
    min-width: 20px;
    height: 20px;
    font-size: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 5px;
    font-weight: bold;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }
  
  .messages-container {
    flex: 1;
    overflow-y: auto;
    padding: 1rem 1.5rem;
    background-color: #f8f9fa;
    scroll-behavior: smooth;
  }
  
  .message {
    margin-bottom: 0.75rem;
    max-width: 85%; /* Increased to allow longer messages */
    padding: 0.85rem 1rem;
    border-radius: var(--message-radius);
    position: relative;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    animation: message-pop-in 0.3s ease-in-out;
  }
  
  @keyframes message-pop-in {
    0% { 
      opacity: 0;
      transform: translateY(10px);
    }
    100% { 
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .message.sent {
    margin-left: auto;
    border-bottom-right-radius: var(--message-tail-radius);
    background-color: var(--primary-color);
    color: var(--light-text);
  }
  
  .message.received {
    margin-right: auto;
    border-bottom-left-radius: var(--message-tail-radius);
    background-color: white;
    color: var(--text-color);
    border: 1px solid #e9ecef;
  }
  
  .message.sending {
    opacity: 0.8;
  }
  
  .sending-indicator {
    font-style: italic;
    margin-left: 5px;
    font-size: 0.65rem;
  }
  
  .message-content {
    word-wrap: break-word;
    line-height: 1.4;
  }
  
  .message-time {
    font-size: 0.7rem;
    opacity: 0.8;
    margin-top: 0.25rem;
    text-align: right;
  }
  
  .date-separator {
    text-align: center;
    margin: 1.5rem 0;
    position: relative;
  }
  
  .date-separator span {
    background-color: #f8f9fa;
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;
    color: #6c757d;
    position: relative;
    z-index: 1;
    border-radius: 1rem;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
  }
  
  .date-separator::before {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    top: 50%;
    height: 1px;
    background-color: #dee2e6;
    z-index: 0;
  }
  
  .message-form-container {
    padding: 0.875rem;
    border-top: 1px solid var(--border-color);
    background-color: var(--bg-color);
    box-shadow: 0 -2px 5px rgba(0,0,0,0.05);
  }
  
  .message-form {
    display: flex;
    gap: 0.75rem;
    align-items: flex-end;
  }
  
  #message-input {
    flex: 1;
    min-height: 2.5rem;
    max-height: 150px;
    resize: none;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 1.5rem;
    font-family: inherit;
    font-size: 0.95rem;
    line-height: 1.4;
    transition: all 0.2s;
    box-shadow: 0 1px 3px rgba(0,0,0,0.05);
  }
  
  #message-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(var(--primary-rgb), 0.15);
  }
  
  .send-button {
    padding: 0;
    height: 2.5rem;
    width: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: var(--primary-color);
    color: white;
    border: none;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 2px 5px rgba(0,0,0,0.15);
  }
  
  .send-button:hover {
    background-color: var(--primary-dark);
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(0,0,0,0.15);
  }
  
  .send-button:active {
    transform: translateY(0);
    box-shadow: 0 2px 3px rgba(0,0,0,0.1);
  }
  
  .send-button i {
    font-size: 1rem;
  }
  
  .no-messages {
    text-align: center;
    color: #6c757d;
    padding: 3rem 1rem;
    background-color: rgba(0,0,0,0.02);
    border-radius: 0.5rem;
    font-size: 0.95rem;
  }
  
  .loading-container,
  .error-container {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    gap: 1rem;
  }
  
  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(var(--primary-rgb), 0.2);
    border-radius: 50%;
    border-top-color: var(--primary-color);
    animation: spin 1s ease-in-out infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  .error-icon {
    font-size: 2.5rem;
    color: #e74c3c;
  }
  
  /* Media Queries for Responsive Design */
  
  /* Extra large screens */
  @media (min-width: 1400px) {
    .container {
      width: 85%;
    }
    
    .messages-container {
      padding: 1.5rem 2rem;
    }
    
    .message {
      max-width: 65%; /* More contained on very large screens */
    }
  }
  
  /* Large tablets and desktop */
  @media (min-width: 992px) and (max-width: 1399px) {
    .container {
      padding: 1rem;
      width: 90%;
    }
    
    .chat-container {
      border-radius: var(--border-radius);
      margin: 0 auto;
    }
    
    .message {
      max-width: 70%;
    }
  }
  
  /* Medium-sized tablets and smaller desktops */
  @media (max-width: 991px) {
    .container {
      max-width: 100%;
      padding: 0;
    }
    
    .chat-container {
      border-radius: 0;
      box-shadow: none;
    }
    
    .message {
      max-width: 80%;
    }
  }
  
  /* Small tablets and large phones */
  @media (max-width: 768px) {
    .messages-section {
      height: calc(100vh - var(--mobile-header-height)); /* Use mobile header height variable */
    }
    
    .chat-header {
      padding: 0.75rem;
    }
    
    .chat-header h2 {
      font-size: 1.1rem;
    }
    
    .message {
      max-width: 85%;
      padding: 0.75rem;
    }
    
    .messages-container {
      padding: 1rem;
    }
    
    .message-form-container {
      padding: 0.75rem;
    }
    
    #message-input {
      padding: 0.625rem 0.875rem;
      min-height: 2.25rem;
    }
    
    .send-button {
      height: 2.25rem;
      width: 2.25rem;
    }
  }
  
  /* Small phones */
  @media (max-width: 480px) {
    .header-left {
      max-width: 60%;
    }
    
    .chat-header h2 {
      font-size: 1rem;
    }
    
    .chat-status {
      font-size: 0.75rem;
    }
    
    .message {
      max-width: 85%;
      font-size: 0.9rem;
      padding: 0.625rem 0.75rem;
    }
    
    .message-time {
      font-size: 0.65rem;
    }
    
    .date-separator span {
      font-size: 0.7rem;
      padding: 0.2rem 0.5rem;
    }
    
    #message-input {
      font-size: 0.9rem;
    }
  }
  
  /* Extra small phones */
  @media (max-width: 360px) {
    .header-left {
      max-width: 50%;
    }
    
    .message {
      max-width: 90%;
    }
    
    .send-button {
      height: 2rem;
      width: 2rem;
    }
    
    .send-button i {
      font-size: 0.9rem;
    }
  }
</style>

<%- include('../partials/footer') %> 